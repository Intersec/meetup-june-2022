/***************************************************************************/
/*                                                                         */
/* Copyright 2022 INTERSEC SA                                              */
/*                                                                         */
/* Licensed under the Apache License, Version 2.0 (the "License");         */
/* you may not use this file except in compliance with the License.        */
/* You may obtain a copy of the License at                                 */
/*                                                                         */
/*     http://www.apache.org/licenses/LICENSE-2.0                          */
/*                                                                         */
/* Unless required by applicable law or agreed to in writing, software     */
/* distributed under the License is distributed on an "AS IS" BASIS,       */
/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.*/
/* See the License for the specific language governing permissions and     */
/* limitations under the License.                                          */
/*                                                                         */
/***************************************************************************/

#include <lib-common/core.h>
#include <lib-common/parseopt.h>
#include <lib-common/iop-rpc.h>

#include "wordcount-base.h"


static const char *short_args_g = "";

static const char *long_usage_g[] = {
    "Server part of wordcount",
    "",
    "Receive the file content from the client via RPC, count the number of ",
    "occurrences of each unique words, and send the results back",
    NULL,
};

static struct {
    bool opt_help;
} wordcount_server_g;
#define _G wordcount_server_g

static popt_t opts_g[] = {
    OPT_GROUP("Options:"),
    OPT_FLAG('h', "help", &_G.opt_help, "show this help"),
    OPT_END()
};

/* Create the map type lstr_t => unsigned with name word_occurrences.
 * The word equality ignore the case. */
qm_kvec_t(word_occurrences_map, lstr_t, unsigned, qhash_lstr_ascii_ihash,
          qhash_lstr_ascii_iequal);

/** Split the file content per word and count their occurrences.
 *
 * Put the words and their occurrences in a map.
 *
 * \param[in]  file_content         The file content.
 * \param[out] word_occurrences_map The map countaining the words and their
 *                                  occurrences.
 */
static void wordcount_split_words(
    lstr_t file_content, qm_t(word_occurrences_map) *word_occurrences_map)
{
    pstream_t file_ps;

    /* Initialize the stream parser from the content */
    file_ps = ps_initlstr(&file_content);

    /* Iterate until the stream parser is empty */
    while (!ps_done(&file_ps)) {
        pstream_t word_ps;
        lstr_t word_lstr;
        uint32_t pos;

        /* Get the next word */
        word_ps = ps_get_span(&file_ps, &ctype_iswordpart);

        /* Skip the characters to the next word for next loop */
        ps_skip_cspan(&file_ps, &ctype_iswordpart);

        /* Do nothing if word is empty */
        if (ps_done(&word_ps)) {
            continue;
        }

        /* Put the word in the map */
        /* Store 1 as value if `word_lstr` is not already in the map... */
        word_lstr = LSTR_PS_V(&word_ps);
        pos = qm_put(word_occurrences_map, word_occurrences_map, &word_lstr,
                     1, 0);
        if (pos & QHASH_COLLISION) {
            /* ...increment the value by 1 if `word_lstr` is already in the
             * map. */
            word_occurrences_map->values[pos ^ QHASH_COLLISION] += 1;
        }
    }
}

/** Sort the words by their occurrences in the map to a vector.
 *
 * The words are converted to lower case.
 *
 * \param[in]  word_occurrences_map The map countaining the words and their
 *                                  occurrences.
 * \param[out] word_occurrences_vec The vector of sorted words by their
 *                                  occurrences.
 *                                  The vector and words are allocated on the
 *                                  t_scope.
 */
static void t_wordcount_sort_word_occurrences(
    const qm_t(word_occurrences_map) *word_occurrences_map,
    qv_t(word_occurrences_vec) *word_occurrences_vec)
{
    /* Initialize the vector on the t_scope to the size of the map in order to
     * do only one allocation */
    t_qv_init(word_occurrences_vec,
              qm_len(word_occurrences_map, word_occurrences_map));

    /* Populate the vector with the map content */
    qm_for_each_key_value(word_occurrences_map, word, occurrences,
                          word_occurrences_map)
    {
        wordcount_word_occurrences_t word_occurrences = {
            /* Duplicate the word on the t_scope and use lower case */
            .word = t_lstr_ascii_tolower(word),
            .occurrences = occurrences,
        };

        qv_append(word_occurrences_vec, word_occurrences);
    }

    /* Sort the vector by occurrences.
     * We use qv_sort() that works with a block (clang's closure) */
    qv_sort(word_occurrences_vec)(
        word_occurrences_vec,
        ^int (const wordcount_word_occurrences_t *v1,
              const wordcount_word_occurrences_t *v2)
    {
        return CMP(v2->occurrences, v1->occurrences);
    });
}

/** Split the words from the content of a file and sort the words by
 * occurrences.
 *
 * \param[in]  file_content         The file content.
 * \param[out] word_occurrences_vec The vector of sorted words by their
 *                                  occurrences.
 *                                  The vector is allocated on the t_scope.
 */
static void t_wordcount_split_and_sort_word_occurrences(
    lstr_t file_content, qv_t(word_occurrences_vec) *word_occurrences_vec)
{
    qm_t(word_occurrences_map) word_occurrences_map;

    /* Initialize the map of word occurrences */
    qm_init(word_occurrences_map, &word_occurrences_map);

    /* Split the file content per word */
    wordcount_split_words(file_content, &word_occurrences_map);

    /* Sort the words by their occurrences */
    t_wordcount_sort_word_occurrences(&word_occurrences_map,
                                      word_occurrences_vec);

    /* Clean-up */
    qm_wipe(word_occurrences_map, &word_occurrences_map);
}

__unused__
static void wordcount_server_on_rpc(lstr_t file_content)
{
    t_scope;
    qv_t(word_occurrences_vec) word_occurrences_vec;

    /* Split the words from the content of a file and sort the words by
     * occurrences */
    t_wordcount_split_and_sort_word_occurrences(
        file_content, &word_occurrences_vec);

    /* TODO: reply to the client the sorted word occurrences */
}

int main(int argc, char **argv)
{
    const char *arg0 = NEXTARG(argc, argv);

    /* Parse the arguments */
    argc = parseopt(argc, argv, opts_g, 0);
    if (argc != 0 || _G.opt_help) {
        makeusage(_G.opt_help ? 0 : -1, arg0, short_args_g,
                  long_usage_g, opts_g);
    }

    /* TODO: start the IC server */

    return 0;
}
